[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "inspire-demos"
version = "0.1.0"
description = "Python interface for controlling the Inspire Hand robotic hand via Serial and Modbus TCP"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "TechShare Inc.", email = "contact@techshare.com"},
]
maintainers = [
    {name = "TechShare Inc.", email = "contact@techshare.com"},
]
keywords = [
    "robotics",
    "hand control",
    "inspire hand",
    "serial communication",
    "modbus tcp",
    "robotic hand",
    "automation",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Hardware",
    "Topic :: Communications",
]
dependencies = [
    "pyserial>=3.4",
    "pymodbus>=3.0",
    "numpy>=1.20",
    "loguru>=0.6",
    "matplotlib>=3.5"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "flake8>=5.0",
    "mypy>=1.0",
    "pre-commit>=2.20",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
]

[project.urls]
Homepage = "https://github.com/TechShare-inc/inspire_demos"
Documentation = "https://github.com/TechShare-inc/inspire_demos#readme"
Repository = "https://github.com/TechShare-inc/inspire_demos.git"
"Bug Tracker" = "https://github.com/TechShare-inc/inspire_demos/issues"

[project.scripts]
inspire-demo = "inspire_demos.examples.basic_serial_demo:main"

[tool.hatch.build.targets.wheel]
packages = ["inspire_demos"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/examples",
    "/tests",
    "/docs",
    "/README.md",
    "/pyproject.toml",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-config",
    "--strict-markers",
    "--cov=inspire_demos",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
